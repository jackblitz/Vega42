name: Android Build

on:
  workflow_call:
    outputs:
      build_type:
        description: "The type of build (release or debug)"
        value: ${{ jobs.build_android.outputs.build_type }}
      artifact_name:
        description: "The name of the artifact produced"
        value: ${{ jobs.build_android.outputs.artifact_name }}

jobs:
  build_android:
    runs-on: ubuntu-latest
    outputs:
      build_type: ${{ steps.get_build_type.outputs.build_type }}
      artifact_name: ${{ steps.find_apk.outputs.artifact_name }}
    steps:
      - name: Get build type
        id: get_build_type
        run: echo "build_type=${{ github.ref == 'refs/heads/main' && 'release' || 'debug' }}" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 35
          ndk: 26.1.10909125 # A recent NDK version compatible with API 35

      - name: Cache Android SDK components
        uses: actions/cache@v4
        with:
          path: |
            ~/.android/sdk/cmake
            ~/.android/sdk/ndk
          key: android-sdk-${{ runner.os }}-cmake-3.30.3-ndk-26.1.10909125
          restore-keys: |
            android-sdk-${{ runner.os }}-cmake-3.30.3-
            android-sdk-${{ runner.os }}-

      - name: Install CMake in the Android SDK
        # This is the same version of cmake that is found in build.gradle. This
        # will be used to build libavif and the JNI bindings.
        run: sdkmanager "cmake;3.30.3"

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache native libraries build
        uses: actions/cache@v4
        with:
          path: |
            app/platform/android/app/build/intermediates/cxx
            app/platform/android/app/.cxx
          key: ${{ runner.os }}-native-libs-${{ hashFiles('**/CMakeLists.txt', 'dev/app/polaris/source/third_party/**') }}
          restore-keys: |
            ${{ runner.os }}-native-libs-

      - name: Create keystore from secret
        run: |
          # Decode the keystore file from GitHub secrets
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 --decode > original.keystore
          
          # Convert to JKS format if needed (handles both PKCS12 and JKS)
          keytool -importkeystore -srckeystore original.keystore -srcstoretype PKCS12 \
            -destkeystore release.keystore -deststoretype JKS \
            -srcstorepass "${{ secrets.KEYSTORE_PASSWORD }}" -deststorepass "${{ secrets.KEYSTORE_PASSWORD }}" \
            -srcalias key0 -destalias key0 \
            -srckeypass "${{ secrets.KEY_PASSWORD }}" -destkeypass "${{ secrets.KEY_PASSWORD }}" \
            -noprompt || cp original.keystore release.keystore
          
          # Set environment variables for gradle
          echo "KEYSTORE_FILE=$(pwd)/release.keystore" >> $GITHUB_ENV
          echo "KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> $GITHUB_ENV
          echo "KEY_ALIAS=key0" >> $GITHUB_ENV
          echo "KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> $GITHUB_ENV
        working-directory: app/platform/android

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        working-directory: app/platform/android

      - name: Build Android APK
        run: ./gradlew assemble${{ steps.get_build_type.outputs.build_type == 'release' && 'Release' || 'Debug' }} -Pandroid.injected.cmake.dir=${{ env.ANDROID_HOME }}/cmake/3.30.3/bin
        working-directory: app/platform/android

      - name: Find and Rename APK
        id: find_apk
        run: |
          BUILD_TYPE=${{ steps.get_build_type.outputs.build_type }}
          ARTIFACT_NAME="Vega42-android-${BUILD_TYPE}"
          APK_DIR="app/platform/android/app/build/outputs/apk/${BUILD_TYPE}"
          APK_FILE=$(find "${APK_DIR}" -name "*.apk" | head -n 1)
          if [ -f "${APK_FILE}" ]; then
            NEW_NAME="${ARTIFACT_NAME}.apk"
            mv "${APK_FILE}" "${APK_DIR}/${NEW_NAME}"
            echo "apk_path=${APK_DIR}/${NEW_NAME}" >> $GITHUB_OUTPUT
            echo "artifact_name=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT
          else
            echo "APK not found in ${APK_DIR}"
            exit 1
          fi

      - name: Upload APK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.find_apk.outputs.artifact_name }}
          path: ${{ steps.find_apk.outputs.apk_path }}
