name: Unified Build and Release

on:
  push:
    branches:
      - main
      - dev

jobs:
  build_artifacts:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: ${{ github.ref == 'refs/heads/main' && fromJson('["release"]') || fromJson('["debug"]') }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Add MSBuild to PATH (Windows)
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v2

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.x'

      - name: Install SDL3 Build Dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential git make pkg-config cmake ninja-build gnome-desktop-testing libasound2-dev libpulse-dev libaudio-dev libjack-dev libsndio-dev libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libxtst-dev libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev libpipewire-0.3-dev libwayland-dev libdecor-0-dev liburing-dev libvulkan-dev vulkan-tools

      - name: Make scripts executable (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          chmod +x install.sh
          chmod +x build.sh
      - name: Create Build Directory
        run: mkdir -p dev/app/cmake_build

      - name: Configure CMake
        run: cmake -S ${{ github.workspace }}/dev/app -B dev/app/cmake_build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

      - name: Build Project
        run: cmake --build dev/app/cmake_build --config ${{ matrix.build_type }}
      - name: List Build Output (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          dir dev\app\build\${{ matrix.build_type }}
      - name: List Build Output (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          ls -R dev/app/build/${{ matrix.build_type }}
      - name: Prepare Artifact
        run: |
          mkdir artifact_staging
          cp dev/app/build/${{ matrix.build_type }}/${{ (matrix.os == 'windows-latest' && 'Vega42.exe') || 'Vega42' }} artifact_staging/
      - name: Copy PDB for Windows Debug builds
        if: matrix.os == 'windows-latest' && matrix.build_type == 'Debug'
        run: |
          Copy-Item dev/app/build/${{ matrix.build_type }}/Vega42.pdb artifact_staging/

      - name: Create Archive (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          tar -czvf Vega42-${{ matrix.os }}-${{ matrix.build_type }}.tar.gz -C artifact_staging .
      - name: Create Zip Archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          7z a Vega42-windows-${{ matrix.build_type }}.zip artifact_staging\
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Vega42-${{ matrix.os }}-${{ matrix.build_type }}
          path: |
            ${{ (matrix.os == 'windows-latest' && format('Vega42-windows-{0}.zip', matrix.build_type)) || format('Vega42-{0}-{1}.tar.gz', matrix.os, matrix.build_type) }}
  create_github_release:
    needs: build_artifacts
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write

    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4

      - name: List Downloaded Artifacts
        run: ls -R

      - name: Create GitHub ${{ matrix.build_type }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: |
            ./Vega42-windows-release.zip
            ./Vega42-ubuntu-latest-release.tar.gz
            ./Vega42-macos-latest-release.tar.gz
          asset_name: |
            Vega42-windows-release.zip
            Vega42-ubuntu-latest-release.tar.gz
            Vega42-macos-latest-release.tar.gz
          asset_content_type: |
            application/zip
            application/gzip
            application/gzip